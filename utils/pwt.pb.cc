// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pwt.proto

#include "pwt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wind {
namespace utils {
namespace pwt {
PROTOBUF_CONSTEXPR HeaderMessage::HeaderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custom_)*/{}
  , /*decltype(_impl_.typ_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x5u_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderMessageDefaultTypeInternal() {}
  union {
    HeaderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderMessageDefaultTypeInternal _HeaderMessage_default_instance_;
PROTOBUF_CONSTEXPR PayloadMessage::PayloadMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aud_vec_)*/{}
  , /*decltype(_impl_.custom_)*/{}
  , /*decltype(_impl_.sub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iss_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aud_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pbi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exp_)*/nullptr
  , /*decltype(_impl_.nbf_)*/nullptr
  , /*decltype(_impl_.iat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PayloadMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PayloadMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PayloadMessageDefaultTypeInternal() {}
  union {
    PayloadMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PayloadMessageDefaultTypeInternal _PayloadMessage_default_instance_;
PROTOBUF_CONSTEXPR InstanceMessage::InstanceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstanceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceMessageDefaultTypeInternal() {}
  union {
    InstanceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceMessageDefaultTypeInternal _InstanceMessage_default_instance_;
PROTOBUF_CONSTEXPR PWTMessage::PWTMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PWTMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PWTMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PWTMessageDefaultTypeInternal() {}
  union {
    PWTMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PWTMessageDefaultTypeInternal _PWTMessage_default_instance_;
PROTOBUF_CONSTEXPR CustomMessage::CustomMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMessageDefaultTypeInternal() {}
  union {
    CustomMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMessageDefaultTypeInternal _CustomMessage_default_instance_;
}  // namespace pwt
}  // namespace utils
}  // namespace wind
static ::_pb::Metadata file_level_metadata_pwt_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pwt_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pwt_2eproto = nullptr;

const uint32_t TableStruct_pwt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _impl_.typ_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _impl_.kid_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _impl_.pwk_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _impl_.x5u_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::HeaderMessage, _impl_.custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.sub_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.iss_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.aud_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.aud_vec_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.nbf_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.iat_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.pbi_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PayloadMessage, _impl_.custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::InstanceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::InstanceMessage, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::InstanceMessage, _impl_.custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PWTMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PWTMessage, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PWTMessage, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::PWTMessage, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::CustomMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::CustomMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::wind::utils::pwt::CustomMessage, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wind::utils::pwt::HeaderMessage)},
  { 11, -1, -1, sizeof(::wind::utils::pwt::PayloadMessage)},
  { 26, -1, -1, sizeof(::wind::utils::pwt::InstanceMessage)},
  { 34, -1, -1, sizeof(::wind::utils::pwt::PWTMessage)},
  { 43, -1, -1, sizeof(::wind::utils::pwt::CustomMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wind::utils::pwt::_HeaderMessage_default_instance_._instance,
  &::wind::utils::pwt::_PayloadMessage_default_instance_._instance,
  &::wind::utils::pwt::_InstanceMessage_default_instance_._instance,
  &::wind::utils::pwt::_PWTMessage_default_instance_._instance,
  &::wind::utils::pwt::_CustomMessage_default_instance_._instance,
};

const char descriptor_table_protodef_pwt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpwt.proto\022\016wind.utils.pwt\032\037google/prot"
  "obuf/timestamp.proto\"r\n\rHeaderMessage\022\013\n"
  "\003typ\030\001 \001(\014\022\013\n\003kid\030\002 \001(\014\022\013\n\003pwk\030\003 \001(\014\022\013\n\003"
  "x5u\030\004 \001(\014\022-\n\006custom\030\005 \003(\0132\035.wind.utils.p"
  "wt.CustomMessage\"\377\001\n\016PayloadMessage\022\013\n\003s"
  "ub\030\001 \001(\014\022\013\n\003iss\030\002 \001(\014\022\013\n\003aud\030\003 \001(\014\022\017\n\007au"
  "d_vec\030\004 \003(\t\022\'\n\003exp\030\005 \001(\0132\032.google.protob"
  "uf.Timestamp\022\'\n\003nbf\030\006 \001(\0132\032.google.proto"
  "buf.Timestamp\022\'\n\003iat\030\007 \001(\0132\032.google.prot"
  "obuf.Timestamp\022\013\n\003pbi\030\010 \001(\014\022-\n\006custom\030\t "
  "\003(\0132\035.wind.utils.pwt.CustomMessage\"/\n\017In"
  "stanceMessage\022\014\n\004head\030\001 \001(\014\022\016\n\006custom\030\002 "
  "\001(\014\"@\n\nPWTMessage\022\016\n\006header\030\001 \001(\014\022\017\n\007pay"
  "load\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\"+\n\rCustomM"
  "essage\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pwt_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_pwt_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pwt_2eproto = {
    false, false, 602, descriptor_table_protodef_pwt_2eproto,
    "pwt.proto",
    &descriptor_table_pwt_2eproto_once, descriptor_table_pwt_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_pwt_2eproto::offsets,
    file_level_metadata_pwt_2eproto, file_level_enum_descriptors_pwt_2eproto,
    file_level_service_descriptors_pwt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pwt_2eproto_getter() {
  return &descriptor_table_pwt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pwt_2eproto(&descriptor_table_pwt_2eproto);
namespace wind {
namespace utils {
namespace pwt {

// ===================================================================

class HeaderMessage::_Internal {
 public:
};

HeaderMessage::HeaderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wind.utils.pwt.HeaderMessage)
}
HeaderMessage::HeaderMessage(const HeaderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_){from._impl_.custom_}
    , decltype(_impl_.typ_){}
    , decltype(_impl_.kid_){}
    , decltype(_impl_.pwk_){}
    , decltype(_impl_.x5u_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.typ_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typ_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_typ().empty()) {
    _this->_impl_.typ_.Set(from._internal_typ(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kid().empty()) {
    _this->_impl_.kid_.Set(from._internal_kid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwk().empty()) {
    _this->_impl_.pwk_.Set(from._internal_pwk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x5u_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x5u_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x5u().empty()) {
    _this->_impl_.x5u_.Set(from._internal_x5u(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:wind.utils.pwt.HeaderMessage)
}

inline void HeaderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_){arena}
    , decltype(_impl_.typ_){}
    , decltype(_impl_.kid_){}
    , decltype(_impl_.pwk_){}
    , decltype(_impl_.x5u_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.typ_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typ_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x5u_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x5u_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderMessage::~HeaderMessage() {
  // @@protoc_insertion_point(destructor:wind.utils.pwt.HeaderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_.~RepeatedPtrField();
  _impl_.typ_.Destroy();
  _impl_.kid_.Destroy();
  _impl_.pwk_.Destroy();
  _impl_.x5u_.Destroy();
}

void HeaderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wind.utils.pwt.HeaderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_.Clear();
  _impl_.typ_.ClearToEmpty();
  _impl_.kid_.ClearToEmpty();
  _impl_.pwk_.ClearToEmpty();
  _impl_.x5u_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes typ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_typ();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes kid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_kid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pwk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pwk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes x5u = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_x5u();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .wind.utils.pwt.CustomMessage custom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind.utils.pwt.HeaderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes typ = 1;
  if (!this->_internal_typ().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_typ(), target);
  }

  // bytes kid = 2;
  if (!this->_internal_kid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_kid(), target);
  }

  // bytes pwk = 3;
  if (!this->_internal_pwk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pwk(), target);
  }

  // bytes x5u = 4;
  if (!this->_internal_x5u().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_x5u(), target);
  }

  // repeated .wind.utils.pwt.CustomMessage custom = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind.utils.pwt.HeaderMessage)
  return target;
}

size_t HeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wind.utils.pwt.HeaderMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wind.utils.pwt.CustomMessage custom = 5;
  total_size += 1UL * this->_internal_custom_size();
  for (const auto& msg : this->_impl_.custom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes typ = 1;
  if (!this->_internal_typ().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_typ());
  }

  // bytes kid = 2;
  if (!this->_internal_kid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kid());
  }

  // bytes pwk = 3;
  if (!this->_internal_pwk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pwk());
  }

  // bytes x5u = 4;
  if (!this->_internal_x5u().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x5u());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderMessage::GetClassData() const { return &_class_data_; }


void HeaderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderMessage*>(&to_msg);
  auto& from = static_cast<const HeaderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wind.utils.pwt.HeaderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_.MergeFrom(from._impl_.custom_);
  if (!from._internal_typ().empty()) {
    _this->_internal_set_typ(from._internal_typ());
  }
  if (!from._internal_kid().empty()) {
    _this->_internal_set_kid(from._internal_kid());
  }
  if (!from._internal_pwk().empty()) {
    _this->_internal_set_pwk(from._internal_pwk());
  }
  if (!from._internal_x5u().empty()) {
    _this->_internal_set_x5u(from._internal_x5u());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderMessage::CopyFrom(const HeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wind.utils.pwt.HeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderMessage::IsInitialized() const {
  return true;
}

void HeaderMessage::InternalSwap(HeaderMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custom_.InternalSwap(&other->_impl_.custom_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.typ_, lhs_arena,
      &other->_impl_.typ_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kid_, lhs_arena,
      &other->_impl_.kid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwk_, lhs_arena,
      &other->_impl_.pwk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x5u_, lhs_arena,
      &other->_impl_.x5u_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pwt_2eproto_getter, &descriptor_table_pwt_2eproto_once,
      file_level_metadata_pwt_2eproto[0]);
}

// ===================================================================

class PayloadMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exp(const PayloadMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& nbf(const PayloadMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& iat(const PayloadMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PayloadMessage::_Internal::exp(const PayloadMessage* msg) {
  return *msg->_impl_.exp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PayloadMessage::_Internal::nbf(const PayloadMessage* msg) {
  return *msg->_impl_.nbf_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PayloadMessage::_Internal::iat(const PayloadMessage* msg) {
  return *msg->_impl_.iat_;
}
void PayloadMessage::clear_exp() {
  if (GetArenaForAllocation() == nullptr && _impl_.exp_ != nullptr) {
    delete _impl_.exp_;
  }
  _impl_.exp_ = nullptr;
}
void PayloadMessage::clear_nbf() {
  if (GetArenaForAllocation() == nullptr && _impl_.nbf_ != nullptr) {
    delete _impl_.nbf_;
  }
  _impl_.nbf_ = nullptr;
}
void PayloadMessage::clear_iat() {
  if (GetArenaForAllocation() == nullptr && _impl_.iat_ != nullptr) {
    delete _impl_.iat_;
  }
  _impl_.iat_ = nullptr;
}
PayloadMessage::PayloadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wind.utils.pwt.PayloadMessage)
}
PayloadMessage::PayloadMessage(const PayloadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PayloadMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aud_vec_){from._impl_.aud_vec_}
    , decltype(_impl_.custom_){from._impl_.custom_}
    , decltype(_impl_.sub_){}
    , decltype(_impl_.iss_){}
    , decltype(_impl_.aud_){}
    , decltype(_impl_.pbi_){}
    , decltype(_impl_.exp_){nullptr}
    , decltype(_impl_.nbf_){nullptr}
    , decltype(_impl_.iat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub().empty()) {
    _this->_impl_.sub_.Set(from._internal_sub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iss_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iss_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iss().empty()) {
    _this->_impl_.iss_.Set(from._internal_iss(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aud().empty()) {
    _this->_impl_.aud_.Set(from._internal_aud(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pbi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pbi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pbi().empty()) {
    _this->_impl_.pbi_.Set(from._internal_pbi(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_exp()) {
    _this->_impl_.exp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exp_);
  }
  if (from._internal_has_nbf()) {
    _this->_impl_.nbf_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.nbf_);
  }
  if (from._internal_has_iat()) {
    _this->_impl_.iat_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.iat_);
  }
  // @@protoc_insertion_point(copy_constructor:wind.utils.pwt.PayloadMessage)
}

inline void PayloadMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aud_vec_){arena}
    , decltype(_impl_.custom_){arena}
    , decltype(_impl_.sub_){}
    , decltype(_impl_.iss_){}
    , decltype(_impl_.aud_){}
    , decltype(_impl_.pbi_){}
    , decltype(_impl_.exp_){nullptr}
    , decltype(_impl_.nbf_){nullptr}
    , decltype(_impl_.iat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iss_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iss_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pbi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pbi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PayloadMessage::~PayloadMessage() {
  // @@protoc_insertion_point(destructor:wind.utils.pwt.PayloadMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PayloadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aud_vec_.~RepeatedPtrField();
  _impl_.custom_.~RepeatedPtrField();
  _impl_.sub_.Destroy();
  _impl_.iss_.Destroy();
  _impl_.aud_.Destroy();
  _impl_.pbi_.Destroy();
  if (this != internal_default_instance()) delete _impl_.exp_;
  if (this != internal_default_instance()) delete _impl_.nbf_;
  if (this != internal_default_instance()) delete _impl_.iat_;
}

void PayloadMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PayloadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wind.utils.pwt.PayloadMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aud_vec_.Clear();
  _impl_.custom_.Clear();
  _impl_.sub_.ClearToEmpty();
  _impl_.iss_.ClearToEmpty();
  _impl_.aud_.ClearToEmpty();
  _impl_.pbi_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.exp_ != nullptr) {
    delete _impl_.exp_;
  }
  _impl_.exp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nbf_ != nullptr) {
    delete _impl_.nbf_;
  }
  _impl_.nbf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.iat_ != nullptr) {
    delete _impl_.iat_;
  }
  _impl_.iat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iss();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes aud = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_aud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string aud_vec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aud_vec();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "wind.utils.pwt.PayloadMessage.aud_vec"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp nbf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nbf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp iat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_iat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pbi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pbi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .wind.utils.pwt.CustomMessage custom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind.utils.pwt.PayloadMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sub = 1;
  if (!this->_internal_sub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sub(), target);
  }

  // bytes iss = 2;
  if (!this->_internal_iss().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_iss(), target);
  }

  // bytes aud = 3;
  if (!this->_internal_aud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_aud(), target);
  }

  // repeated string aud_vec = 4;
  for (int i = 0, n = this->_internal_aud_vec_size(); i < n; i++) {
    const auto& s = this->_internal_aud_vec(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wind.utils.pwt.PayloadMessage.aud_vec");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.Timestamp exp = 5;
  if (this->_internal_has_exp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exp(this),
        _Internal::exp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp nbf = 6;
  if (this->_internal_has_nbf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::nbf(this),
        _Internal::nbf(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp iat = 7;
  if (this->_internal_has_iat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::iat(this),
        _Internal::iat(this).GetCachedSize(), target, stream);
  }

  // bytes pbi = 8;
  if (!this->_internal_pbi().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_pbi(), target);
  }

  // repeated .wind.utils.pwt.CustomMessage custom = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind.utils.pwt.PayloadMessage)
  return target;
}

size_t PayloadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wind.utils.pwt.PayloadMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aud_vec = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.aud_vec_.size());
  for (int i = 0, n = _impl_.aud_vec_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.aud_vec_.Get(i));
  }

  // repeated .wind.utils.pwt.CustomMessage custom = 9;
  total_size += 1UL * this->_internal_custom_size();
  for (const auto& msg : this->_impl_.custom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes sub = 1;
  if (!this->_internal_sub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sub());
  }

  // bytes iss = 2;
  if (!this->_internal_iss().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iss());
  }

  // bytes aud = 3;
  if (!this->_internal_aud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aud());
  }

  // bytes pbi = 8;
  if (!this->_internal_pbi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pbi());
  }

  // .google.protobuf.Timestamp exp = 5;
  if (this->_internal_has_exp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exp_);
  }

  // .google.protobuf.Timestamp nbf = 6;
  if (this->_internal_has_nbf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nbf_);
  }

  // .google.protobuf.Timestamp iat = 7;
  if (this->_internal_has_iat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PayloadMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadMessage::GetClassData() const { return &_class_data_; }


void PayloadMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PayloadMessage*>(&to_msg);
  auto& from = static_cast<const PayloadMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wind.utils.pwt.PayloadMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aud_vec_.MergeFrom(from._impl_.aud_vec_);
  _this->_impl_.custom_.MergeFrom(from._impl_.custom_);
  if (!from._internal_sub().empty()) {
    _this->_internal_set_sub(from._internal_sub());
  }
  if (!from._internal_iss().empty()) {
    _this->_internal_set_iss(from._internal_iss());
  }
  if (!from._internal_aud().empty()) {
    _this->_internal_set_aud(from._internal_aud());
  }
  if (!from._internal_pbi().empty()) {
    _this->_internal_set_pbi(from._internal_pbi());
  }
  if (from._internal_has_exp()) {
    _this->_internal_mutable_exp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exp());
  }
  if (from._internal_has_nbf()) {
    _this->_internal_mutable_nbf()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_nbf());
  }
  if (from._internal_has_iat()) {
    _this->_internal_mutable_iat()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_iat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadMessage::CopyFrom(const PayloadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wind.utils.pwt.PayloadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMessage::IsInitialized() const {
  return true;
}

void PayloadMessage::InternalSwap(PayloadMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aud_vec_.InternalSwap(&other->_impl_.aud_vec_);
  _impl_.custom_.InternalSwap(&other->_impl_.custom_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_, lhs_arena,
      &other->_impl_.sub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iss_, lhs_arena,
      &other->_impl_.iss_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aud_, lhs_arena,
      &other->_impl_.aud_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pbi_, lhs_arena,
      &other->_impl_.pbi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadMessage, _impl_.iat_)
      + sizeof(PayloadMessage::_impl_.iat_)
      - PROTOBUF_FIELD_OFFSET(PayloadMessage, _impl_.exp_)>(
          reinterpret_cast<char*>(&_impl_.exp_),
          reinterpret_cast<char*>(&other->_impl_.exp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pwt_2eproto_getter, &descriptor_table_pwt_2eproto_once,
      file_level_metadata_pwt_2eproto[1]);
}

// ===================================================================

class InstanceMessage::_Internal {
 public:
};

InstanceMessage::InstanceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wind.utils.pwt.InstanceMessage)
}
InstanceMessage::InstanceMessage(const InstanceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstanceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){}
    , decltype(_impl_.custom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.head_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_head().empty()) {
    _this->_impl_.head_.Set(from._internal_head(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_custom().empty()) {
    _this->_impl_.custom_.Set(from._internal_custom(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:wind.utils.pwt.InstanceMessage)
}

inline void InstanceMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){}
    , decltype(_impl_.custom_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.head_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstanceMessage::~InstanceMessage() {
  // @@protoc_insertion_point(destructor:wind.utils.pwt.InstanceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstanceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.head_.Destroy();
  _impl_.custom_.Destroy();
}

void InstanceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstanceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wind.utils.pwt.InstanceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.head_.ClearToEmpty();
  _impl_.custom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_head();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes custom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_custom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstanceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind.utils.pwt.InstanceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes head = 1;
  if (!this->_internal_head().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_head(), target);
  }

  // bytes custom = 2;
  if (!this->_internal_custom().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind.utils.pwt.InstanceMessage)
  return target;
}

size_t InstanceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wind.utils.pwt.InstanceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes head = 1;
  if (!this->_internal_head().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_head());
  }

  // bytes custom = 2;
  if (!this->_internal_custom().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_custom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstanceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceMessage::GetClassData() const { return &_class_data_; }


void InstanceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstanceMessage*>(&to_msg);
  auto& from = static_cast<const InstanceMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wind.utils.pwt.InstanceMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_head().empty()) {
    _this->_internal_set_head(from._internal_head());
  }
  if (!from._internal_custom().empty()) {
    _this->_internal_set_custom(from._internal_custom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceMessage::CopyFrom(const InstanceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wind.utils.pwt.InstanceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceMessage::IsInitialized() const {
  return true;
}

void InstanceMessage::InternalSwap(InstanceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_, lhs_arena,
      &other->_impl_.head_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_, lhs_arena,
      &other->_impl_.custom_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pwt_2eproto_getter, &descriptor_table_pwt_2eproto_once,
      file_level_metadata_pwt_2eproto[2]);
}

// ===================================================================

class PWTMessage::_Internal {
 public:
};

PWTMessage::PWTMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wind.utils.pwt.PWTMessage)
}
PWTMessage::PWTMessage(const PWTMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PWTMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:wind.utils.pwt.PWTMessage)
}

inline void PWTMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PWTMessage::~PWTMessage() {
  // @@protoc_insertion_point(destructor:wind.utils.pwt.PWTMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PWTMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
  _impl_.payload_.Destroy();
  _impl_.signature_.Destroy();
}

void PWTMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PWTMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wind.utils.pwt.PWTMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PWTMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PWTMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind.utils.pwt.PWTMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes header = 1;
  if (!this->_internal_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_header(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // bytes signature = 3;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind.utils.pwt.PWTMessage)
  return target;
}

size_t PWTMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wind.utils.pwt.PWTMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_header());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes signature = 3;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PWTMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PWTMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PWTMessage::GetClassData() const { return &_class_data_; }


void PWTMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PWTMessage*>(&to_msg);
  auto& from = static_cast<const PWTMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wind.utils.pwt.PWTMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header().empty()) {
    _this->_internal_set_header(from._internal_header());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PWTMessage::CopyFrom(const PWTMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wind.utils.pwt.PWTMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWTMessage::IsInitialized() const {
  return true;
}

void PWTMessage::InternalSwap(PWTMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PWTMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pwt_2eproto_getter, &descriptor_table_pwt_2eproto_once,
      file_level_metadata_pwt_2eproto[3]);
}

// ===================================================================

class CustomMessage::_Internal {
 public:
};

CustomMessage::CustomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wind.utils.pwt.CustomMessage)
}
CustomMessage::CustomMessage(const CustomMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:wind.utils.pwt.CustomMessage)
}

inline void CustomMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMessage::~CustomMessage() {
  // @@protoc_insertion_point(destructor:wind.utils.pwt.CustomMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void CustomMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wind.utils.pwt.CustomMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind.utils.pwt.CustomMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind.utils.pwt.CustomMessage)
  return target;
}

size_t CustomMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wind.utils.pwt.CustomMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMessage::GetClassData() const { return &_class_data_; }


void CustomMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMessage*>(&to_msg);
  auto& from = static_cast<const CustomMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wind.utils.pwt.CustomMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMessage::CopyFrom(const CustomMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wind.utils.pwt.CustomMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMessage::IsInitialized() const {
  return true;
}

void CustomMessage::InternalSwap(CustomMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pwt_2eproto_getter, &descriptor_table_pwt_2eproto_once,
      file_level_metadata_pwt_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pwt
}  // namespace utils
}  // namespace wind
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wind::utils::pwt::HeaderMessage*
Arena::CreateMaybeMessage< ::wind::utils::pwt::HeaderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wind::utils::pwt::HeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wind::utils::pwt::PayloadMessage*
Arena::CreateMaybeMessage< ::wind::utils::pwt::PayloadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wind::utils::pwt::PayloadMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wind::utils::pwt::InstanceMessage*
Arena::CreateMaybeMessage< ::wind::utils::pwt::InstanceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wind::utils::pwt::InstanceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wind::utils::pwt::PWTMessage*
Arena::CreateMaybeMessage< ::wind::utils::pwt::PWTMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wind::utils::pwt::PWTMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wind::utils::pwt::CustomMessage*
Arena::CreateMaybeMessage< ::wind::utils::pwt::CustomMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wind::utils::pwt::CustomMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
