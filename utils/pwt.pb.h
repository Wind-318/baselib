// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pwt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pwt_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_pwt_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_pwt_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_pwt_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_pwt_2eproto;
namespace wind {
namespace utils {
namespace pwt {
class CustomMessage;
struct CustomMessageDefaultTypeInternal;
extern CustomMessageDefaultTypeInternal _CustomMessage_default_instance_;
class HeaderMessage;
struct HeaderMessageDefaultTypeInternal;
extern HeaderMessageDefaultTypeInternal _HeaderMessage_default_instance_;
class InstanceMessage;
struct InstanceMessageDefaultTypeInternal;
extern InstanceMessageDefaultTypeInternal _InstanceMessage_default_instance_;
class PWTMessage;
struct PWTMessageDefaultTypeInternal;
extern PWTMessageDefaultTypeInternal _PWTMessage_default_instance_;
class PayloadMessage;
struct PayloadMessageDefaultTypeInternal;
extern PayloadMessageDefaultTypeInternal _PayloadMessage_default_instance_;
}  // namespace pwt
}  // namespace utils
}  // namespace wind
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace wind {
namespace utils {
namespace pwt {

// ===================================================================


// -------------------------------------------------------------------

class HeaderMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wind.utils.pwt.HeaderMessage) */ {
 public:
  inline HeaderMessage() : HeaderMessage(nullptr) {}
  ~HeaderMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HeaderMessage(::google::protobuf::internal::ConstantInitialized);

  HeaderMessage(const HeaderMessage& from);
  HeaderMessage(HeaderMessage&& from) noexcept
    : HeaderMessage() {
    *this = ::std::move(from);
  }

  inline HeaderMessage& operator=(const HeaderMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderMessage& operator=(HeaderMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderMessage* internal_default_instance() {
    return reinterpret_cast<const HeaderMessage*>(
               &_HeaderMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeaderMessage& a, HeaderMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeaderMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeaderMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HeaderMessage& from) {
    HeaderMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wind.utils.pwt.HeaderMessage";
  }
  protected:
  explicit HeaderMessage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 5,
    kTypFieldNumber = 1,
    kKidFieldNumber = 2,
    kPwkFieldNumber = 3,
    kX5UFieldNumber = 4,
  };
  // repeated .wind.utils.pwt.CustomMessage custom = 5;
  int custom_size() const;
  private:
  int _internal_custom_size() const;

  public:
  void clear_custom() ;
  ::wind::utils::pwt::CustomMessage* mutable_custom(int index);
  ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >*
      mutable_custom();
  private:
  const ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>& _internal_custom() const;
  ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>* _internal_mutable_custom();
  public:
  const ::wind::utils::pwt::CustomMessage& custom(int index) const;
  ::wind::utils::pwt::CustomMessage* add_custom();
  const ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >&
      custom() const;
  // bytes typ = 1;
  void clear_typ() ;
  const std::string& typ() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_typ(Arg_&& arg, Args_... args);
  std::string* mutable_typ();
  PROTOBUF_NODISCARD std::string* release_typ();
  void set_allocated_typ(std::string* ptr);

  private:
  const std::string& _internal_typ() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_typ(
      const std::string& value);
  std::string* _internal_mutable_typ();

  public:
  // bytes kid = 2;
  void clear_kid() ;
  const std::string& kid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kid(Arg_&& arg, Args_... args);
  std::string* mutable_kid();
  PROTOBUF_NODISCARD std::string* release_kid();
  void set_allocated_kid(std::string* ptr);

  private:
  const std::string& _internal_kid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kid(
      const std::string& value);
  std::string* _internal_mutable_kid();

  public:
  // bytes pwk = 3;
  void clear_pwk() ;
  const std::string& pwk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pwk(Arg_&& arg, Args_... args);
  std::string* mutable_pwk();
  PROTOBUF_NODISCARD std::string* release_pwk();
  void set_allocated_pwk(std::string* ptr);

  private:
  const std::string& _internal_pwk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwk(
      const std::string& value);
  std::string* _internal_mutable_pwk();

  public:
  // bytes x5u = 4;
  void clear_x5u() ;
  const std::string& x5u() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_x5u(Arg_&& arg, Args_... args);
  std::string* mutable_x5u();
  PROTOBUF_NODISCARD std::string* release_x5u();
  void set_allocated_x5u(std::string* ptr);

  private:
  const std::string& _internal_x5u() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x5u(
      const std::string& value);
  std::string* _internal_mutable_x5u();

  public:
  // @@protoc_insertion_point(class_scope:wind.utils.pwt.HeaderMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage > custom_;
    ::google::protobuf::internal::ArenaStringPtr typ_;
    ::google::protobuf::internal::ArenaStringPtr kid_;
    ::google::protobuf::internal::ArenaStringPtr pwk_;
    ::google::protobuf::internal::ArenaStringPtr x5u_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pwt_2eproto;
};// -------------------------------------------------------------------

class PayloadMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wind.utils.pwt.PayloadMessage) */ {
 public:
  inline PayloadMessage() : PayloadMessage(nullptr) {}
  ~PayloadMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PayloadMessage(::google::protobuf::internal::ConstantInitialized);

  PayloadMessage(const PayloadMessage& from);
  PayloadMessage(PayloadMessage&& from) noexcept
    : PayloadMessage() {
    *this = ::std::move(from);
  }

  inline PayloadMessage& operator=(const PayloadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadMessage& operator=(PayloadMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadMessage* internal_default_instance() {
    return reinterpret_cast<const PayloadMessage*>(
               &_PayloadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PayloadMessage& a, PayloadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayloadMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayloadMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PayloadMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PayloadMessage& from) {
    PayloadMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wind.utils.pwt.PayloadMessage";
  }
  protected:
  explicit PayloadMessage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudVecFieldNumber = 4,
    kCustomFieldNumber = 9,
    kSubFieldNumber = 1,
    kIssFieldNumber = 2,
    kAudFieldNumber = 3,
    kPbiFieldNumber = 8,
    kExpFieldNumber = 5,
    kNbfFieldNumber = 6,
    kIatFieldNumber = 7,
  };
  // repeated string aud_vec = 4;
  int aud_vec_size() const;
  private:
  int _internal_aud_vec_size() const;

  public:
  void clear_aud_vec() ;
  const std::string& aud_vec(int index) const;
  std::string* mutable_aud_vec(int index);
  void set_aud_vec(int index, const std::string& value);
  void set_aud_vec(int index, std::string&& value);
  void set_aud_vec(int index, const char* value);
  void set_aud_vec(int index, const char* value, std::size_t size);
  void set_aud_vec(int index, absl::string_view value);
  std::string* add_aud_vec();
  void add_aud_vec(const std::string& value);
  void add_aud_vec(std::string&& value);
  void add_aud_vec(const char* value);
  void add_aud_vec(const char* value, std::size_t size);
  void add_aud_vec(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& aud_vec() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_aud_vec();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_aud_vec() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_aud_vec();

  public:
  // repeated .wind.utils.pwt.CustomMessage custom = 9;
  int custom_size() const;
  private:
  int _internal_custom_size() const;

  public:
  void clear_custom() ;
  ::wind::utils::pwt::CustomMessage* mutable_custom(int index);
  ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >*
      mutable_custom();
  private:
  const ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>& _internal_custom() const;
  ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>* _internal_mutable_custom();
  public:
  const ::wind::utils::pwt::CustomMessage& custom(int index) const;
  ::wind::utils::pwt::CustomMessage* add_custom();
  const ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >&
      custom() const;
  // bytes sub = 1;
  void clear_sub() ;
  const std::string& sub() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sub(Arg_&& arg, Args_... args);
  std::string* mutable_sub();
  PROTOBUF_NODISCARD std::string* release_sub();
  void set_allocated_sub(std::string* ptr);

  private:
  const std::string& _internal_sub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub(
      const std::string& value);
  std::string* _internal_mutable_sub();

  public:
  // bytes iss = 2;
  void clear_iss() ;
  const std::string& iss() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iss(Arg_&& arg, Args_... args);
  std::string* mutable_iss();
  PROTOBUF_NODISCARD std::string* release_iss();
  void set_allocated_iss(std::string* ptr);

  private:
  const std::string& _internal_iss() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iss(
      const std::string& value);
  std::string* _internal_mutable_iss();

  public:
  // bytes aud = 3;
  void clear_aud() ;
  const std::string& aud() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_aud(Arg_&& arg, Args_... args);
  std::string* mutable_aud();
  PROTOBUF_NODISCARD std::string* release_aud();
  void set_allocated_aud(std::string* ptr);

  private:
  const std::string& _internal_aud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aud(
      const std::string& value);
  std::string* _internal_mutable_aud();

  public:
  // bytes pbi = 8;
  void clear_pbi() ;
  const std::string& pbi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pbi(Arg_&& arg, Args_... args);
  std::string* mutable_pbi();
  PROTOBUF_NODISCARD std::string* release_pbi();
  void set_allocated_pbi(std::string* ptr);

  private:
  const std::string& _internal_pbi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pbi(
      const std::string& value);
  std::string* _internal_mutable_pbi();

  public:
  // .google.protobuf.Timestamp exp = 5;
  bool has_exp() const;
  void clear_exp() ;
  const ::google::protobuf::Timestamp& exp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_exp();
  ::google::protobuf::Timestamp* mutable_exp();
  void set_allocated_exp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_exp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_exp();

  private:
  const ::google::protobuf::Timestamp& _internal_exp() const;
  ::google::protobuf::Timestamp* _internal_mutable_exp();

  public:
  // .google.protobuf.Timestamp nbf = 6;
  bool has_nbf() const;
  void clear_nbf() ;
  const ::google::protobuf::Timestamp& nbf() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_nbf();
  ::google::protobuf::Timestamp* mutable_nbf();
  void set_allocated_nbf(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_nbf(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_nbf();

  private:
  const ::google::protobuf::Timestamp& _internal_nbf() const;
  ::google::protobuf::Timestamp* _internal_mutable_nbf();

  public:
  // .google.protobuf.Timestamp iat = 7;
  bool has_iat() const;
  void clear_iat() ;
  const ::google::protobuf::Timestamp& iat() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_iat();
  ::google::protobuf::Timestamp* mutable_iat();
  void set_allocated_iat(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_iat(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_iat();

  private:
  const ::google::protobuf::Timestamp& _internal_iat() const;
  ::google::protobuf::Timestamp* _internal_mutable_iat();

  public:
  // @@protoc_insertion_point(class_scope:wind.utils.pwt.PayloadMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 4, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> aud_vec_;
    ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage > custom_;
    ::google::protobuf::internal::ArenaStringPtr sub_;
    ::google::protobuf::internal::ArenaStringPtr iss_;
    ::google::protobuf::internal::ArenaStringPtr aud_;
    ::google::protobuf::internal::ArenaStringPtr pbi_;
    ::google::protobuf::Timestamp* exp_;
    ::google::protobuf::Timestamp* nbf_;
    ::google::protobuf::Timestamp* iat_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pwt_2eproto;
};// -------------------------------------------------------------------

class InstanceMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wind.utils.pwt.InstanceMessage) */ {
 public:
  inline InstanceMessage() : InstanceMessage(nullptr) {}
  ~InstanceMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstanceMessage(::google::protobuf::internal::ConstantInitialized);

  InstanceMessage(const InstanceMessage& from);
  InstanceMessage(InstanceMessage&& from) noexcept
    : InstanceMessage() {
    *this = ::std::move(from);
  }

  inline InstanceMessage& operator=(const InstanceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceMessage& operator=(InstanceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstanceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstanceMessage* internal_default_instance() {
    return reinterpret_cast<const InstanceMessage*>(
               &_InstanceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstanceMessage& a, InstanceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstanceMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstanceMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstanceMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstanceMessage& from) {
    InstanceMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wind.utils.pwt.InstanceMessage";
  }
  protected:
  explicit InstanceMessage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kCustomFieldNumber = 2,
  };
  // bytes head = 1;
  void clear_head() ;
  const std::string& head() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head(Arg_&& arg, Args_... args);
  std::string* mutable_head();
  PROTOBUF_NODISCARD std::string* release_head();
  void set_allocated_head(std::string* ptr);

  private:
  const std::string& _internal_head() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head(
      const std::string& value);
  std::string* _internal_mutable_head();

  public:
  // bytes custom = 2;
  void clear_custom() ;
  const std::string& custom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom(Arg_&& arg, Args_... args);
  std::string* mutable_custom();
  PROTOBUF_NODISCARD std::string* release_custom();
  void set_allocated_custom(std::string* ptr);

  private:
  const std::string& _internal_custom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom(
      const std::string& value);
  std::string* _internal_mutable_custom();

  public:
  // @@protoc_insertion_point(class_scope:wind.utils.pwt.InstanceMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr head_;
    ::google::protobuf::internal::ArenaStringPtr custom_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pwt_2eproto;
};// -------------------------------------------------------------------

class PWTMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wind.utils.pwt.PWTMessage) */ {
 public:
  inline PWTMessage() : PWTMessage(nullptr) {}
  ~PWTMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PWTMessage(::google::protobuf::internal::ConstantInitialized);

  PWTMessage(const PWTMessage& from);
  PWTMessage(PWTMessage&& from) noexcept
    : PWTMessage() {
    *this = ::std::move(from);
  }

  inline PWTMessage& operator=(const PWTMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWTMessage& operator=(PWTMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWTMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWTMessage* internal_default_instance() {
    return reinterpret_cast<const PWTMessage*>(
               &_PWTMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PWTMessage& a, PWTMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PWTMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWTMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWTMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWTMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PWTMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PWTMessage& from) {
    PWTMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWTMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wind.utils.pwt.PWTMessage";
  }
  protected:
  explicit PWTMessage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // bytes header = 1;
  void clear_header() ;
  const std::string& header() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header(Arg_&& arg, Args_... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* ptr);

  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(
      const std::string& value);
  std::string* _internal_mutable_header();

  public:
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // bytes signature = 3;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // @@protoc_insertion_point(class_scope:wind.utils.pwt.PWTMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr header_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pwt_2eproto;
};// -------------------------------------------------------------------

class CustomMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wind.utils.pwt.CustomMessage) */ {
 public:
  inline CustomMessage() : CustomMessage(nullptr) {}
  ~CustomMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CustomMessage(::google::protobuf::internal::ConstantInitialized);

  CustomMessage(const CustomMessage& from);
  CustomMessage(CustomMessage&& from) noexcept
    : CustomMessage() {
    *this = ::std::move(from);
  }

  inline CustomMessage& operator=(const CustomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomMessage& operator=(CustomMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomMessage* internal_default_instance() {
    return reinterpret_cast<const CustomMessage*>(
               &_CustomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CustomMessage& a, CustomMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CustomMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CustomMessage& from) {
    CustomMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wind.utils.pwt.CustomMessage";
  }
  protected:
  explicit CustomMessage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:wind.utils.pwt.CustomMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pwt_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HeaderMessage

// bytes typ = 1;
inline void HeaderMessage::clear_typ() {
  _impl_.typ_.ClearToEmpty();
}
inline const std::string& HeaderMessage::typ() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.HeaderMessage.typ)
  return _internal_typ();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderMessage::set_typ(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.typ_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.HeaderMessage.typ)
}
inline std::string* HeaderMessage::mutable_typ() {
  std::string* _s = _internal_mutable_typ();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.HeaderMessage.typ)
  return _s;
}
inline const std::string& HeaderMessage::_internal_typ() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.typ_.Get();
}
inline void HeaderMessage::_internal_set_typ(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.typ_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderMessage::_internal_mutable_typ() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.typ_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderMessage::release_typ() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.HeaderMessage.typ)
  return _impl_.typ_.Release();
}
inline void HeaderMessage::set_allocated_typ(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.typ_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.typ_.IsDefault()) {
          _impl_.typ_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.HeaderMessage.typ)
}

// bytes kid = 2;
inline void HeaderMessage::clear_kid() {
  _impl_.kid_.ClearToEmpty();
}
inline const std::string& HeaderMessage::kid() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.HeaderMessage.kid)
  return _internal_kid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderMessage::set_kid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.HeaderMessage.kid)
}
inline std::string* HeaderMessage::mutable_kid() {
  std::string* _s = _internal_mutable_kid();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.HeaderMessage.kid)
  return _s;
}
inline const std::string& HeaderMessage::_internal_kid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kid_.Get();
}
inline void HeaderMessage::_internal_set_kid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kid_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderMessage::_internal_mutable_kid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.kid_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderMessage::release_kid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.HeaderMessage.kid)
  return _impl_.kid_.Release();
}
inline void HeaderMessage::set_allocated_kid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.kid_.IsDefault()) {
          _impl_.kid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.HeaderMessage.kid)
}

// bytes pwk = 3;
inline void HeaderMessage::clear_pwk() {
  _impl_.pwk_.ClearToEmpty();
}
inline const std::string& HeaderMessage::pwk() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.HeaderMessage.pwk)
  return _internal_pwk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderMessage::set_pwk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pwk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.HeaderMessage.pwk)
}
inline std::string* HeaderMessage::mutable_pwk() {
  std::string* _s = _internal_mutable_pwk();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.HeaderMessage.pwk)
  return _s;
}
inline const std::string& HeaderMessage::_internal_pwk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pwk_.Get();
}
inline void HeaderMessage::_internal_set_pwk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pwk_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderMessage::_internal_mutable_pwk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pwk_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderMessage::release_pwk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.HeaderMessage.pwk)
  return _impl_.pwk_.Release();
}
inline void HeaderMessage::set_allocated_pwk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pwk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pwk_.IsDefault()) {
          _impl_.pwk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.HeaderMessage.pwk)
}

// bytes x5u = 4;
inline void HeaderMessage::clear_x5u() {
  _impl_.x5u_.ClearToEmpty();
}
inline const std::string& HeaderMessage::x5u() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.HeaderMessage.x5u)
  return _internal_x5u();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderMessage::set_x5u(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x5u_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.HeaderMessage.x5u)
}
inline std::string* HeaderMessage::mutable_x5u() {
  std::string* _s = _internal_mutable_x5u();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.HeaderMessage.x5u)
  return _s;
}
inline const std::string& HeaderMessage::_internal_x5u() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x5u_.Get();
}
inline void HeaderMessage::_internal_set_x5u(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x5u_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderMessage::_internal_mutable_x5u() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.x5u_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderMessage::release_x5u() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.HeaderMessage.x5u)
  return _impl_.x5u_.Release();
}
inline void HeaderMessage::set_allocated_x5u(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x5u_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.x5u_.IsDefault()) {
          _impl_.x5u_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.HeaderMessage.x5u)
}

// repeated .wind.utils.pwt.CustomMessage custom = 5;
inline int HeaderMessage::_internal_custom_size() const {
  return _internal_custom().size();
}
inline int HeaderMessage::custom_size() const {
  return _internal_custom_size();
}
inline void HeaderMessage::clear_custom() {
  _internal_mutable_custom()->Clear();
}
inline ::wind::utils::pwt::CustomMessage* HeaderMessage::mutable_custom(int index) {
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.HeaderMessage.custom)
  return _internal_mutable_custom()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >*
HeaderMessage::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_list:wind.utils.pwt.HeaderMessage.custom)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_custom();
}
inline const ::wind::utils::pwt::CustomMessage& HeaderMessage::custom(int index) const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.HeaderMessage.custom)
    return _internal_custom().Get(index);
}
inline ::wind::utils::pwt::CustomMessage* HeaderMessage::add_custom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::wind::utils::pwt::CustomMessage* _add = _internal_mutable_custom()->Add();
  // @@protoc_insertion_point(field_add:wind.utils.pwt.HeaderMessage.custom)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >&
HeaderMessage::custom() const {
  // @@protoc_insertion_point(field_list:wind.utils.pwt.HeaderMessage.custom)
  return _internal_custom();
}
inline const ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>&
HeaderMessage::_internal_custom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_;
}
inline ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>*
HeaderMessage::_internal_mutable_custom() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.custom_;
}

// -------------------------------------------------------------------

// PayloadMessage

// bytes sub = 1;
inline void PayloadMessage::clear_sub() {
  _impl_.sub_.ClearToEmpty();
}
inline const std::string& PayloadMessage::sub() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.sub)
  return _internal_sub();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayloadMessage::set_sub(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.sub)
}
inline std::string* PayloadMessage::mutable_sub() {
  std::string* _s = _internal_mutable_sub();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.sub)
  return _s;
}
inline const std::string& PayloadMessage::_internal_sub() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_.Get();
}
inline void PayloadMessage::_internal_set_sub(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_.Set(value, GetArenaForAllocation());
}
inline std::string* PayloadMessage::_internal_mutable_sub() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sub_.Mutable( GetArenaForAllocation());
}
inline std::string* PayloadMessage::release_sub() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.sub)
  return _impl_.sub_.Release();
}
inline void PayloadMessage::set_allocated_sub(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sub_.IsDefault()) {
          _impl_.sub_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.sub)
}

// bytes iss = 2;
inline void PayloadMessage::clear_iss() {
  _impl_.iss_.ClearToEmpty();
}
inline const std::string& PayloadMessage::iss() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.iss)
  return _internal_iss();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayloadMessage::set_iss(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iss_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.iss)
}
inline std::string* PayloadMessage::mutable_iss() {
  std::string* _s = _internal_mutable_iss();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.iss)
  return _s;
}
inline const std::string& PayloadMessage::_internal_iss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iss_.Get();
}
inline void PayloadMessage::_internal_set_iss(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iss_.Set(value, GetArenaForAllocation());
}
inline std::string* PayloadMessage::_internal_mutable_iss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.iss_.Mutable( GetArenaForAllocation());
}
inline std::string* PayloadMessage::release_iss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.iss)
  return _impl_.iss_.Release();
}
inline void PayloadMessage::set_allocated_iss(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iss_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.iss_.IsDefault()) {
          _impl_.iss_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.iss)
}

// bytes aud = 3;
inline void PayloadMessage::clear_aud() {
  _impl_.aud_.ClearToEmpty();
}
inline const std::string& PayloadMessage::aud() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.aud)
  return _internal_aud();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayloadMessage::set_aud(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.aud_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.aud)
}
inline std::string* PayloadMessage::mutable_aud() {
  std::string* _s = _internal_mutable_aud();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.aud)
  return _s;
}
inline const std::string& PayloadMessage::_internal_aud() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aud_.Get();
}
inline void PayloadMessage::_internal_set_aud(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.aud_.Set(value, GetArenaForAllocation());
}
inline std::string* PayloadMessage::_internal_mutable_aud() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.aud_.Mutable( GetArenaForAllocation());
}
inline std::string* PayloadMessage::release_aud() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.aud)
  return _impl_.aud_.Release();
}
inline void PayloadMessage::set_allocated_aud(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aud_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.aud_.IsDefault()) {
          _impl_.aud_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.aud)
}

// repeated string aud_vec = 4;
inline int PayloadMessage::_internal_aud_vec_size() const {
  return _internal_aud_vec().size();
}
inline int PayloadMessage::aud_vec_size() const {
  return _internal_aud_vec_size();
}
inline void PayloadMessage::clear_aud_vec() {
  _internal_mutable_aud_vec()->Clear();
}
inline std::string* PayloadMessage::add_aud_vec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_aud_vec()->Add();
  // @@protoc_insertion_point(field_add_mutable:wind.utils.pwt.PayloadMessage.aud_vec)
  return _s;
}
inline const std::string& PayloadMessage::aud_vec(int index) const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.aud_vec)
  return _internal_aud_vec().Get(index);
}
inline std::string* PayloadMessage::mutable_aud_vec(int index) {
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.aud_vec)
  return _internal_mutable_aud_vec()->Mutable(index);
}
inline void PayloadMessage::set_aud_vec(int index, const std::string& value) {
  _internal_mutable_aud_vec()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::set_aud_vec(int index, std::string&& value) {
  _internal_mutable_aud_vec()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::set_aud_vec(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_aud_vec()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::set_aud_vec(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_aud_vec()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::set_aud_vec(int index, absl::string_view value) {
  _internal_mutable_aud_vec()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::add_aud_vec(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aud_vec()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::add_aud_vec(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aud_vec()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::add_aud_vec(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aud_vec()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::add_aud_vec(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aud_vec()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline void PayloadMessage::add_aud_vec(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aud_vec()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:wind.utils.pwt.PayloadMessage.aud_vec)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PayloadMessage::aud_vec() const {
  // @@protoc_insertion_point(field_list:wind.utils.pwt.PayloadMessage.aud_vec)
  return _internal_aud_vec();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PayloadMessage::mutable_aud_vec() {
  // @@protoc_insertion_point(field_mutable_list:wind.utils.pwt.PayloadMessage.aud_vec)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_aud_vec();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PayloadMessage::_internal_aud_vec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aud_vec_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PayloadMessage::_internal_mutable_aud_vec() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.aud_vec_;
}

// .google.protobuf.Timestamp exp = 5;
inline bool PayloadMessage::has_exp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PayloadMessage::_internal_exp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.exp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PayloadMessage::exp() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.exp)
  return _internal_exp();
}
inline void PayloadMessage::unsafe_arena_set_allocated_exp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exp_);
  }
  _impl_.exp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wind.utils.pwt.PayloadMessage.exp)
}
inline ::google::protobuf::Timestamp* PayloadMessage::release_exp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.exp_;
  _impl_.exp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* PayloadMessage::unsafe_arena_release_exp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.exp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.exp_;
  _impl_.exp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PayloadMessage::_internal_mutable_exp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.exp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.exp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.exp_;
}
inline ::google::protobuf::Timestamp* PayloadMessage::mutable_exp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_exp();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.exp)
  return _msg;
}
inline void PayloadMessage::set_allocated_exp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.exp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.exp)
}

// .google.protobuf.Timestamp nbf = 6;
inline bool PayloadMessage::has_nbf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nbf_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PayloadMessage::_internal_nbf() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.nbf_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PayloadMessage::nbf() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.nbf)
  return _internal_nbf();
}
inline void PayloadMessage::unsafe_arena_set_allocated_nbf(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nbf_);
  }
  _impl_.nbf_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wind.utils.pwt.PayloadMessage.nbf)
}
inline ::google::protobuf::Timestamp* PayloadMessage::release_nbf() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.nbf_;
  _impl_.nbf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* PayloadMessage::unsafe_arena_release_nbf() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.nbf)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.nbf_;
  _impl_.nbf_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PayloadMessage::_internal_mutable_nbf() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nbf_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.nbf_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.nbf_;
}
inline ::google::protobuf::Timestamp* PayloadMessage::mutable_nbf() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_nbf();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.nbf)
  return _msg;
}
inline void PayloadMessage::set_allocated_nbf(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nbf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.nbf_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.nbf)
}

// .google.protobuf.Timestamp iat = 7;
inline bool PayloadMessage::has_iat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.iat_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PayloadMessage::_internal_iat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.iat_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PayloadMessage::iat() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.iat)
  return _internal_iat();
}
inline void PayloadMessage::unsafe_arena_set_allocated_iat(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.iat_);
  }
  _impl_.iat_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wind.utils.pwt.PayloadMessage.iat)
}
inline ::google::protobuf::Timestamp* PayloadMessage::release_iat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.iat_;
  _impl_.iat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* PayloadMessage::unsafe_arena_release_iat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.iat)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.iat_;
  _impl_.iat_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PayloadMessage::_internal_mutable_iat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.iat_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.iat_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.iat_;
}
inline ::google::protobuf::Timestamp* PayloadMessage::mutable_iat() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_iat();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.iat)
  return _msg;
}
inline void PayloadMessage::set_allocated_iat(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.iat_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.iat_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.iat)
}

// bytes pbi = 8;
inline void PayloadMessage::clear_pbi() {
  _impl_.pbi_.ClearToEmpty();
}
inline const std::string& PayloadMessage::pbi() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.pbi)
  return _internal_pbi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PayloadMessage::set_pbi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pbi_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PayloadMessage.pbi)
}
inline std::string* PayloadMessage::mutable_pbi() {
  std::string* _s = _internal_mutable_pbi();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.pbi)
  return _s;
}
inline const std::string& PayloadMessage::_internal_pbi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pbi_.Get();
}
inline void PayloadMessage::_internal_set_pbi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pbi_.Set(value, GetArenaForAllocation());
}
inline std::string* PayloadMessage::_internal_mutable_pbi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pbi_.Mutable( GetArenaForAllocation());
}
inline std::string* PayloadMessage::release_pbi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PayloadMessage.pbi)
  return _impl_.pbi_.Release();
}
inline void PayloadMessage::set_allocated_pbi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pbi_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pbi_.IsDefault()) {
          _impl_.pbi_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PayloadMessage.pbi)
}

// repeated .wind.utils.pwt.CustomMessage custom = 9;
inline int PayloadMessage::_internal_custom_size() const {
  return _internal_custom().size();
}
inline int PayloadMessage::custom_size() const {
  return _internal_custom_size();
}
inline void PayloadMessage::clear_custom() {
  _internal_mutable_custom()->Clear();
}
inline ::wind::utils::pwt::CustomMessage* PayloadMessage::mutable_custom(int index) {
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PayloadMessage.custom)
  return _internal_mutable_custom()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >*
PayloadMessage::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_list:wind.utils.pwt.PayloadMessage.custom)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_custom();
}
inline const ::wind::utils::pwt::CustomMessage& PayloadMessage::custom(int index) const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PayloadMessage.custom)
    return _internal_custom().Get(index);
}
inline ::wind::utils::pwt::CustomMessage* PayloadMessage::add_custom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::wind::utils::pwt::CustomMessage* _add = _internal_mutable_custom()->Add();
  // @@protoc_insertion_point(field_add:wind.utils.pwt.PayloadMessage.custom)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wind::utils::pwt::CustomMessage >&
PayloadMessage::custom() const {
  // @@protoc_insertion_point(field_list:wind.utils.pwt.PayloadMessage.custom)
  return _internal_custom();
}
inline const ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>&
PayloadMessage::_internal_custom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_;
}
inline ::google::protobuf::RepeatedPtrField<::wind::utils::pwt::CustomMessage>*
PayloadMessage::_internal_mutable_custom() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.custom_;
}

// -------------------------------------------------------------------

// InstanceMessage

// bytes head = 1;
inline void InstanceMessage::clear_head() {
  _impl_.head_.ClearToEmpty();
}
inline const std::string& InstanceMessage::head() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.InstanceMessage.head)
  return _internal_head();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstanceMessage::set_head(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.head_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.InstanceMessage.head)
}
inline std::string* InstanceMessage::mutable_head() {
  std::string* _s = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.InstanceMessage.head)
  return _s;
}
inline const std::string& InstanceMessage::_internal_head() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_.Get();
}
inline void InstanceMessage::_internal_set_head(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.head_.Set(value, GetArenaForAllocation());
}
inline std::string* InstanceMessage::_internal_mutable_head() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.head_.Mutable( GetArenaForAllocation());
}
inline std::string* InstanceMessage::release_head() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.InstanceMessage.head)
  return _impl_.head_.Release();
}
inline void InstanceMessage::set_allocated_head(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.head_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_.IsDefault()) {
          _impl_.head_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.InstanceMessage.head)
}

// bytes custom = 2;
inline void InstanceMessage::clear_custom() {
  _impl_.custom_.ClearToEmpty();
}
inline const std::string& InstanceMessage::custom() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.InstanceMessage.custom)
  return _internal_custom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstanceMessage::set_custom(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.custom_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.InstanceMessage.custom)
}
inline std::string* InstanceMessage::mutable_custom() {
  std::string* _s = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.InstanceMessage.custom)
  return _s;
}
inline const std::string& InstanceMessage::_internal_custom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_.Get();
}
inline void InstanceMessage::_internal_set_custom(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.custom_.Set(value, GetArenaForAllocation());
}
inline std::string* InstanceMessage::_internal_mutable_custom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.custom_.Mutable( GetArenaForAllocation());
}
inline std::string* InstanceMessage::release_custom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.InstanceMessage.custom)
  return _impl_.custom_.Release();
}
inline void InstanceMessage::set_allocated_custom(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.custom_.IsDefault()) {
          _impl_.custom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.InstanceMessage.custom)
}

// -------------------------------------------------------------------

// PWTMessage

// bytes header = 1;
inline void PWTMessage::clear_header() {
  _impl_.header_.ClearToEmpty();
}
inline const std::string& PWTMessage::header() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PWTMessage.header)
  return _internal_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PWTMessage::set_header(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PWTMessage.header)
}
inline std::string* PWTMessage::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PWTMessage.header)
  return _s;
}
inline const std::string& PWTMessage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_.Get();
}
inline void PWTMessage::_internal_set_header(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* PWTMessage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.header_.Mutable( GetArenaForAllocation());
}
inline std::string* PWTMessage::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PWTMessage.header)
  return _impl_.header_.Release();
}
inline void PWTMessage::set_allocated_header(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_.IsDefault()) {
          _impl_.header_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PWTMessage.header)
}

// bytes payload = 2;
inline void PWTMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& PWTMessage::payload() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PWTMessage.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PWTMessage::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PWTMessage.payload)
}
inline std::string* PWTMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PWTMessage.payload)
  return _s;
}
inline const std::string& PWTMessage::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void PWTMessage::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* PWTMessage::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* PWTMessage::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PWTMessage.payload)
  return _impl_.payload_.Release();
}
inline void PWTMessage::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PWTMessage.payload)
}

// bytes signature = 3;
inline void PWTMessage::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& PWTMessage::signature() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.PWTMessage.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PWTMessage::set_signature(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.PWTMessage.signature)
}
inline std::string* PWTMessage::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.PWTMessage.signature)
  return _s;
}
inline const std::string& PWTMessage::_internal_signature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_.Get();
}
inline void PWTMessage::_internal_set_signature(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* PWTMessage::_internal_mutable_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* PWTMessage::release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.PWTMessage.signature)
  return _impl_.signature_.Release();
}
inline void PWTMessage::set_allocated_signature(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.PWTMessage.signature)
}

// -------------------------------------------------------------------

// CustomMessage

// bytes key = 1;
inline void CustomMessage::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CustomMessage::key() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.CustomMessage.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomMessage::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.CustomMessage.key)
}
inline std::string* CustomMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.CustomMessage.key)
  return _s;
}
inline const std::string& CustomMessage::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void CustomMessage::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomMessage::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* CustomMessage::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.CustomMessage.key)
  return _impl_.key_.Release();
}
inline void CustomMessage::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.CustomMessage.key)
}

// bytes value = 2;
inline void CustomMessage::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& CustomMessage::value() const {
  // @@protoc_insertion_point(field_get:wind.utils.pwt.CustomMessage.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomMessage::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wind.utils.pwt.CustomMessage.value)
}
inline std::string* CustomMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:wind.utils.pwt.CustomMessage.value)
  return _s;
}
inline const std::string& CustomMessage::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void CustomMessage::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomMessage::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* CustomMessage::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:wind.utils.pwt.CustomMessage.value)
  return _impl_.value_.Release();
}
inline void CustomMessage::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wind.utils.pwt.CustomMessage.value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pwt
}  // namespace utils
}  // namespace wind


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_pwt_2eproto_2epb_2eh
